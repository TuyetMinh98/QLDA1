using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Public
{
	/// <summary>
	/// Strongly-typed collection for the TblBinhLuan class.
	/// </summary>
    [Serializable]
	public partial class TblBinhLuanCollection : ActiveList<TblBinhLuan, TblBinhLuanCollection>
	{	   
		public TblBinhLuanCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBinhLuanCollection</returns>
		public TblBinhLuanCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBinhLuan o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBinhLuan table.
	/// </summary>
	[Serializable]
	public partial class TblBinhLuan : ActiveRecord<TblBinhLuan>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBinhLuan()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBinhLuan(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBinhLuan(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBinhLuan(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBinhLuan", TableType.Table, DataService.GetInstance("ViewWeb"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdNguoiBinhLuan = new TableSchema.TableColumn(schema);
				colvarIdNguoiBinhLuan.ColumnName = "IdNguoiBinhLuan";
				colvarIdNguoiBinhLuan.DataType = DbType.Guid;
				colvarIdNguoiBinhLuan.MaxLength = 0;
				colvarIdNguoiBinhLuan.AutoIncrement = false;
				colvarIdNguoiBinhLuan.IsNullable = false;
				colvarIdNguoiBinhLuan.IsPrimaryKey = false;
				colvarIdNguoiBinhLuan.IsForeignKey = true;
				colvarIdNguoiBinhLuan.IsReadOnly = false;
				colvarIdNguoiBinhLuan.DefaultSetting = @"";
				
					colvarIdNguoiBinhLuan.ForeignKeyTableName = "TblNhanVien";
				schema.Columns.Add(colvarIdNguoiBinhLuan);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "NoiDung";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = 1073741823;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = false;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				TableSchema.TableColumn colvarIdThongBao = new TableSchema.TableColumn(schema);
				colvarIdThongBao.ColumnName = "IdThongBao";
				colvarIdThongBao.DataType = DbType.Guid;
				colvarIdThongBao.MaxLength = 0;
				colvarIdThongBao.AutoIncrement = false;
				colvarIdThongBao.IsNullable = false;
				colvarIdThongBao.IsPrimaryKey = false;
				colvarIdThongBao.IsForeignKey = false;
				colvarIdThongBao.IsReadOnly = false;
				colvarIdThongBao.DefaultSetting = @"";
				colvarIdThongBao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThongBao);
				
				TableSchema.TableColumn colvarIdBinhLuan = new TableSchema.TableColumn(schema);
				colvarIdBinhLuan.ColumnName = "IdBinhLuan";
				colvarIdBinhLuan.DataType = DbType.Guid;
				colvarIdBinhLuan.MaxLength = 0;
				colvarIdBinhLuan.AutoIncrement = false;
				colvarIdBinhLuan.IsNullable = true;
				colvarIdBinhLuan.IsPrimaryKey = false;
				colvarIdBinhLuan.IsForeignKey = false;
				colvarIdBinhLuan.IsReadOnly = false;
				colvarIdBinhLuan.DefaultSetting = @"";
				colvarIdBinhLuan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBinhLuan);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.String;
				colvarTrangThai.MaxLength = 10;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NgayTao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNgayCapNhat = new TableSchema.TableColumn(schema);
				colvarNgayCapNhat.ColumnName = "NgayCapNhat";
				colvarNgayCapNhat.DataType = DbType.DateTime;
				colvarNgayCapNhat.MaxLength = 0;
				colvarNgayCapNhat.AutoIncrement = false;
				colvarNgayCapNhat.IsNullable = true;
				colvarNgayCapNhat.IsPrimaryKey = false;
				colvarNgayCapNhat.IsForeignKey = false;
				colvarNgayCapNhat.IsReadOnly = false;
				colvarNgayCapNhat.DefaultSetting = @"";
				colvarNgayCapNhat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayCapNhat);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ViewWeb"].AddSchema("TblBinhLuan",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdNguoiBinhLuan")]
		[Bindable(true)]
		public Guid IdNguoiBinhLuan 
		{
			get { return GetColumnValue<Guid>(Columns.IdNguoiBinhLuan); }
			set { SetColumnValue(Columns.IdNguoiBinhLuan, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		  
		[XmlAttribute("IdThongBao")]
		[Bindable(true)]
		public Guid IdThongBao 
		{
			get { return GetColumnValue<Guid>(Columns.IdThongBao); }
			set { SetColumnValue(Columns.IdThongBao, value); }
		}
		  
		[XmlAttribute("IdBinhLuan")]
		[Bindable(true)]
		public Guid? IdBinhLuan 
		{
			get { return GetColumnValue<Guid?>(Columns.IdBinhLuan); }
			set { SetColumnValue(Columns.IdBinhLuan, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public string TrangThai 
		{
			get { return GetColumnValue<string>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NgayCapNhat")]
		[Bindable(true)]
		public DateTime? NgayCapNhat 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayCapNhat); }
			set { SetColumnValue(Columns.NgayCapNhat, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblNhanVien ActiveRecord object related to this TblBinhLuan
		/// 
		/// </summary>
		public Public.TblNhanVien TblNhanVien
		{
			get { return Public.TblNhanVien.FetchByID(this.IdNguoiBinhLuan); }
			set { SetColumnValue("IdNguoiBinhLuan", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,Guid varIdNguoiBinhLuan,string varNoiDung,Guid varIdThongBao,Guid? varIdBinhLuan,string varTrangThai,DateTime varNgayTao,DateTime? varNgayCapNhat)
		{
			TblBinhLuan item = new TblBinhLuan();
			
			item.Id = varId;
			
			item.IdNguoiBinhLuan = varIdNguoiBinhLuan;
			
			item.NoiDung = varNoiDung;
			
			item.IdThongBao = varIdThongBao;
			
			item.IdBinhLuan = varIdBinhLuan;
			
			item.TrangThai = varTrangThai;
			
			item.NgayTao = varNgayTao;
			
			item.NgayCapNhat = varNgayCapNhat;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,Guid varIdNguoiBinhLuan,string varNoiDung,Guid varIdThongBao,Guid? varIdBinhLuan,string varTrangThai,DateTime varNgayTao,DateTime? varNgayCapNhat)
		{
			TblBinhLuan item = new TblBinhLuan();
			
				item.Id = varId;
			
				item.IdNguoiBinhLuan = varIdNguoiBinhLuan;
			
				item.NoiDung = varNoiDung;
			
				item.IdThongBao = varIdThongBao;
			
				item.IdBinhLuan = varIdBinhLuan;
			
				item.TrangThai = varTrangThai;
			
				item.NgayTao = varNgayTao;
			
				item.NgayCapNhat = varNgayCapNhat;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdNguoiBinhLuanColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThongBaoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBinhLuanColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayCapNhatColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string IdNguoiBinhLuan = @"IdNguoiBinhLuan";
			 public static string NoiDung = @"NoiDung";
			 public static string IdThongBao = @"IdThongBao";
			 public static string IdBinhLuan = @"IdBinhLuan";
			 public static string TrangThai = @"TrangThai";
			 public static string NgayTao = @"NgayTao";
			 public static string NgayCapNhat = @"NgayCapNhat";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
